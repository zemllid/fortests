document.addEventListener("DOMContentLoaded", async () => {await loadFrogs();})
async function loadFrogs()
{
    try {
        const response = await fetch("/frogs"); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∞–± —Å —Å–µ—Ä–≤–µ—Ä–∞
        const frogs = await response.json();
        const tableBody = document.querySelector("#frogsTableBody");

        if (frogs.length === 0) {
            tableBody.innerHTML = "<tr><td colspan='4'>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∂–∞–±–∞—Ö üê∏</td></tr>";
            return;
        }

        frogs.forEach(frog => {
            const row = tableBody.insertRow();
            row.insertCell(0).innerText = frog.name;
            row.insertCell(1).innerText = frog.species;
            row.insertCell(2).innerText = frog.habitat;
            row.insertCell(3).innerText = frog.age;
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∂–∞–±–∞—Ö:", error);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∂–∞–±—ã (–ø—Ä–∏–º–µ—Ä)
async function addFrog(name, species, habitat, age) {
    const frog = { name, species, habitat, age };
    try {
        const response = await fetch("/frogs", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(frog),
        });

        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–∞–±—ã");

        console.log("–ñ–∞–±–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:", frog);
        await loadFrogs(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—É—é –∂–∞–±—É
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
    }
}
